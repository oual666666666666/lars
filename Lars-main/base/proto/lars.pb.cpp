// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lars.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lars.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lars {
class HostInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HostInfo>
     _instance;
} _HostInfo_default_instance_;
class GetRouteRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetRouteRequest>
     _instance;
} _GetRouteRequest_default_instance_;
class GetRouteResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetRouteResponse>
     _instance;
} _GetRouteResponse_default_instance_;
class HostCallResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HostCallResult>
     _instance;
} _HostCallResult_default_instance_;
class ReportStatusRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ReportStatusRequest>
     _instance;
} _ReportStatusRequest_default_instance_;
class GetHostRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetHostRequest>
     _instance;
} _GetHostRequest_default_instance_;
class GetHostResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetHostResponse>
     _instance;
} _GetHostResponse_default_instance_;
class ReportRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ReportRequest>
     _instance;
} _ReportRequest_default_instance_;

namespace protobuf_lars_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostInfo, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostInfo, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRequest, modid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRequest, cmdid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteResponse, modid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteResponse, cmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteResponse, host_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostCallResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostCallResult, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostCallResult, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostCallResult, succ_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostCallResult, err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostCallResult, overload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportStatusRequest, modid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportStatusRequest, cmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportStatusRequest, caller_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportStatusRequest, results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportStatusRequest, ts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostRequest, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostRequest, modid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostRequest, cmdid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostResponse, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostResponse, modid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostResponse, cmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostResponse, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostResponse, host_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRequest, modid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRequest, cmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRequest, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRequest, retcode_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(HostInfo)},
  { 7, -1, sizeof(GetRouteRequest)},
  { 14, -1, sizeof(GetRouteResponse)},
  { 22, -1, sizeof(HostCallResult)},
  { 32, -1, sizeof(ReportStatusRequest)},
  { 42, -1, sizeof(GetHostRequest)},
  { 50, -1, sizeof(GetHostResponse)},
  { 60, -1, sizeof(ReportRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_HostInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetRouteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetRouteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HostCallResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReportStatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetHostRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetHostResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReportRequest_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "lars.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _HostInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HostInfo_default_instance_);_GetRouteRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetRouteRequest_default_instance_);_GetRouteResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetRouteResponse_default_instance_);_HostCallResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HostCallResult_default_instance_);_ReportStatusRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ReportStatusRequest_default_instance_);_GetHostRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetHostRequest_default_instance_);_GetHostResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetHostResponse_default_instance_);_ReportRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ReportRequest_default_instance_);_GetHostResponse_default_instance_._instance.get_mutable()->host_ = const_cast< ::lars::HostInfo*>(
      ::lars::HostInfo::internal_default_instance());
  _ReportRequest_default_instance_._instance.get_mutable()->host_ = const_cast< ::lars::HostInfo*>(
      ::lars::HostInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nlars.proto\022\004lars\"$\n\010HostInfo\022\n\n\002ip\030\001 \001"
      "(\005\022\014\n\004port\030\002 \001(\005\"/\n\017GetRouteRequest\022\r\n\005m"
      "odid\030\001 \001(\005\022\r\n\005cmdid\030\002 \001(\005\"N\n\020GetRouteRes"
      "ponse\022\r\n\005modid\030\001 \001(\005\022\r\n\005cmdid\030\002 \001(\005\022\034\n\004h"
      "ost\030\003 \003(\0132\016.lars.HostInfo\"W\n\016HostCallRes"
      "ult\022\n\n\002ip\030\001 \001(\005\022\014\n\004port\030\002 \001(\005\022\014\n\004succ\030\003 "
      "\001(\r\022\013\n\003err\030\004 \001(\r\022\020\n\010overload\030\005 \001(\010\"v\n\023Re"
      "portStatusRequest\022\r\n\005modid\030\001 \001(\005\022\r\n\005cmdi"
      "d\030\002 \001(\005\022\016\n\006caller\030\003 \001(\005\022%\n\007results\030\004 \003(\013"
      "2\024.lars.HostCallResult\022\n\n\002ts\030\005 \001(\r\";\n\016Ge"
      "tHostRequest\022\013\n\003seq\030\001 \001(\r\022\r\n\005modid\030\002 \001(\005"
      "\022\r\n\005cmdid\030\003 \001(\005\"k\n\017GetHostResponse\022\013\n\003se"
      "q\030\001 \001(\r\022\r\n\005modid\030\002 \001(\005\022\r\n\005cmdid\030\003 \001(\005\022\017\n"
      "\007retcode\030\004 \001(\005\022\034\n\004host\030\005 \001(\0132\016.lars.Host"
      "Info\"\\\n\rReportRequest\022\r\n\005modid\030\001 \001(\005\022\r\n\005"
      "cmdid\030\002 \001(\005\022\034\n\004host\030\003 \001(\0132\016.lars.HostInf"
      "o\022\017\n\007retcode\030\004 \001(\005*\345\001\n\tMessageId\022\r\n\tID_U"
      "NKONW\020\000\022\026\n\022ID_GetRouteRequest\020\001\022\027\n\023ID_Ge"
      "tRouteResponse\020\002\022\032\n\026ID_ReportStatusReque"
      "st\020\003\022\025\n\021ID_GetHostRequest\020\004\022\026\n\022ID_GetHos"
      "tResponse\020\005\022\024\n\020ID_ReportRequest\020\006\022\032\n\026ID_"
      "API_GetRouteRequest\020\007\022\033\n\027ID_API_GetRoute"
      "Response\020\010*T\n\013LarsRetCode\022\014\n\010RET_SUCC\020\000\022"
      "\020\n\014RET_OVERLOAD\020\001\022\024\n\020RET_SYSTEM_ERROR\020\002\022"
      "\017\n\013RET_NOEXIST\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 984);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lars.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_lars_2eproto

const ::google::protobuf::EnumDescriptor* MessageId_descriptor() {
  protobuf_lars_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lars_2eproto::file_level_enum_descriptors[0];
}
bool MessageId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LarsRetCode_descriptor() {
  protobuf_lars_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lars_2eproto::file_level_enum_descriptors[1];
}
bool LarsRetCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostInfo::kIpFieldNumber;
const int HostInfo::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostInfo::HostInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lars_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lars.HostInfo)
}
HostInfo::HostInfo(const HostInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:lars.HostInfo)
}

void HostInfo::SharedCtor() {
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(port_));
  _cached_size_ = 0;
}

HostInfo::~HostInfo() {
  // @@protoc_insertion_point(destructor:lars.HostInfo)
  SharedDtor();
}

void HostInfo::SharedDtor() {
}

void HostInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HostInfo::descriptor() {
  protobuf_lars_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lars_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HostInfo& HostInfo::default_instance() {
  protobuf_lars_2eproto::InitDefaults();
  return *internal_default_instance();
}

HostInfo* HostInfo::New(::google::protobuf::Arena* arena) const {
  HostInfo* n = new HostInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:lars.HostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

bool HostInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lars.HostInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lars.HostInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lars.HostInfo)
  return false;
#undef DO_
}

void HostInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lars.HostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ip(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lars.HostInfo)
}

::google::protobuf::uint8* HostInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lars.HostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lars.HostInfo)
  return target;
}

size_t HostInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lars.HostInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 ip = 1;
  if (this->ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lars.HostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HostInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HostInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lars.HostInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lars.HostInfo)
    MergeFrom(*source);
  }
}

void HostInfo::MergeFrom(const HostInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lars.HostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip() != 0) {
    set_ip(from.ip());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void HostInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lars.HostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostInfo::CopyFrom(const HostInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lars.HostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostInfo::IsInitialized() const {
  return true;
}

void HostInfo::Swap(HostInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostInfo::InternalSwap(HostInfo* other) {
  using std::swap;
  swap(ip_, other->ip_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HostInfo::GetMetadata() const {
  protobuf_lars_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lars_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HostInfo

// int32 ip = 1;
void HostInfo::clear_ip() {
  ip_ = 0;
}
::google::protobuf::int32 HostInfo::ip() const {
  // @@protoc_insertion_point(field_get:lars.HostInfo.ip)
  return ip_;
}
void HostInfo::set_ip(::google::protobuf::int32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:lars.HostInfo.ip)
}

// int32 port = 2;
void HostInfo::clear_port() {
  port_ = 0;
}
::google::protobuf::int32 HostInfo::port() const {
  // @@protoc_insertion_point(field_get:lars.HostInfo.port)
  return port_;
}
void HostInfo::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:lars.HostInfo.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRouteRequest::kModidFieldNumber;
const int GetRouteRequest::kCmdidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRouteRequest::GetRouteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lars_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lars.GetRouteRequest)
}
GetRouteRequest::GetRouteRequest(const GetRouteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&modid_, &from.modid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmdid_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(cmdid_));
  // @@protoc_insertion_point(copy_constructor:lars.GetRouteRequest)
}

void GetRouteRequest::SharedCtor() {
  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmdid_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(cmdid_));
  _cached_size_ = 0;
}

GetRouteRequest::~GetRouteRequest() {
  // @@protoc_insertion_point(destructor:lars.GetRouteRequest)
  SharedDtor();
}

void GetRouteRequest::SharedDtor() {
}

void GetRouteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRouteRequest::descriptor() {
  protobuf_lars_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lars_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRouteRequest& GetRouteRequest::default_instance() {
  protobuf_lars_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetRouteRequest* GetRouteRequest::New(::google::protobuf::Arena* arena) const {
  GetRouteRequest* n = new GetRouteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lars.GetRouteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmdid_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(cmdid_));
  _internal_metadata_.Clear();
}

bool GetRouteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lars.GetRouteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 modid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cmdid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lars.GetRouteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lars.GetRouteRequest)
  return false;
#undef DO_
}

void GetRouteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lars.GetRouteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->modid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modid(), output);
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmdid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lars.GetRouteRequest)
}

::google::protobuf::uint8* GetRouteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lars.GetRouteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->modid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modid(), target);
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmdid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lars.GetRouteRequest)
  return target;
}

size_t GetRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lars.GetRouteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 modid = 1;
  if (this->modid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->modid());
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmdid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRouteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lars.GetRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRouteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRouteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lars.GetRouteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lars.GetRouteRequest)
    MergeFrom(*source);
  }
}

void GetRouteRequest::MergeFrom(const GetRouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lars.GetRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.modid() != 0) {
    set_modid(from.modid());
  }
  if (from.cmdid() != 0) {
    set_cmdid(from.cmdid());
  }
}

void GetRouteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lars.GetRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRouteRequest::CopyFrom(const GetRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lars.GetRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRouteRequest::IsInitialized() const {
  return true;
}

void GetRouteRequest::Swap(GetRouteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRouteRequest::InternalSwap(GetRouteRequest* other) {
  using std::swap;
  swap(modid_, other->modid_);
  swap(cmdid_, other->cmdid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRouteRequest::GetMetadata() const {
  protobuf_lars_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lars_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRouteRequest

// int32 modid = 1;
void GetRouteRequest::clear_modid() {
  modid_ = 0;
}
::google::protobuf::int32 GetRouteRequest::modid() const {
  // @@protoc_insertion_point(field_get:lars.GetRouteRequest.modid)
  return modid_;
}
void GetRouteRequest::set_modid(::google::protobuf::int32 value) {
  
  modid_ = value;
  // @@protoc_insertion_point(field_set:lars.GetRouteRequest.modid)
}

// int32 cmdid = 2;
void GetRouteRequest::clear_cmdid() {
  cmdid_ = 0;
}
::google::protobuf::int32 GetRouteRequest::cmdid() const {
  // @@protoc_insertion_point(field_get:lars.GetRouteRequest.cmdid)
  return cmdid_;
}
void GetRouteRequest::set_cmdid(::google::protobuf::int32 value) {
  
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:lars.GetRouteRequest.cmdid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRouteResponse::kModidFieldNumber;
const int GetRouteResponse::kCmdidFieldNumber;
const int GetRouteResponse::kHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRouteResponse::GetRouteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lars_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lars.GetRouteResponse)
}
GetRouteResponse::GetRouteResponse(const GetRouteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      host_(from.host_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&modid_, &from.modid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmdid_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(cmdid_));
  // @@protoc_insertion_point(copy_constructor:lars.GetRouteResponse)
}

void GetRouteResponse::SharedCtor() {
  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmdid_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(cmdid_));
  _cached_size_ = 0;
}

GetRouteResponse::~GetRouteResponse() {
  // @@protoc_insertion_point(destructor:lars.GetRouteResponse)
  SharedDtor();
}

void GetRouteResponse::SharedDtor() {
}

void GetRouteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRouteResponse::descriptor() {
  protobuf_lars_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lars_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRouteResponse& GetRouteResponse::default_instance() {
  protobuf_lars_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetRouteResponse* GetRouteResponse::New(::google::protobuf::Arena* arena) const {
  GetRouteResponse* n = new GetRouteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lars.GetRouteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.Clear();
  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmdid_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(cmdid_));
  _internal_metadata_.Clear();
}

bool GetRouteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lars.GetRouteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 modid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cmdid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .lars.HostInfo host = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_host()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lars.GetRouteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lars.GetRouteResponse)
  return false;
#undef DO_
}

void GetRouteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lars.GetRouteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->modid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modid(), output);
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmdid(), output);
  }

  // repeated .lars.HostInfo host = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->host_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->host(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lars.GetRouteResponse)
}

::google::protobuf::uint8* GetRouteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lars.GetRouteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->modid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modid(), target);
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmdid(), target);
  }

  // repeated .lars.HostInfo host = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->host_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->host(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lars.GetRouteResponse)
  return target;
}

size_t GetRouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lars.GetRouteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .lars.HostInfo host = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->host_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->host(static_cast<int>(i)));
    }
  }

  // int32 modid = 1;
  if (this->modid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->modid());
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmdid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRouteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lars.GetRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRouteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRouteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lars.GetRouteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lars.GetRouteResponse)
    MergeFrom(*source);
  }
}

void GetRouteResponse::MergeFrom(const GetRouteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lars.GetRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  host_.MergeFrom(from.host_);
  if (from.modid() != 0) {
    set_modid(from.modid());
  }
  if (from.cmdid() != 0) {
    set_cmdid(from.cmdid());
  }
}

void GetRouteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lars.GetRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRouteResponse::CopyFrom(const GetRouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lars.GetRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRouteResponse::IsInitialized() const {
  return true;
}

void GetRouteResponse::Swap(GetRouteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRouteResponse::InternalSwap(GetRouteResponse* other) {
  using std::swap;
  host_.InternalSwap(&other->host_);
  swap(modid_, other->modid_);
  swap(cmdid_, other->cmdid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRouteResponse::GetMetadata() const {
  protobuf_lars_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lars_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRouteResponse

// int32 modid = 1;
void GetRouteResponse::clear_modid() {
  modid_ = 0;
}
::google::protobuf::int32 GetRouteResponse::modid() const {
  // @@protoc_insertion_point(field_get:lars.GetRouteResponse.modid)
  return modid_;
}
void GetRouteResponse::set_modid(::google::protobuf::int32 value) {
  
  modid_ = value;
  // @@protoc_insertion_point(field_set:lars.GetRouteResponse.modid)
}

// int32 cmdid = 2;
void GetRouteResponse::clear_cmdid() {
  cmdid_ = 0;
}
::google::protobuf::int32 GetRouteResponse::cmdid() const {
  // @@protoc_insertion_point(field_get:lars.GetRouteResponse.cmdid)
  return cmdid_;
}
void GetRouteResponse::set_cmdid(::google::protobuf::int32 value) {
  
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:lars.GetRouteResponse.cmdid)
}

// repeated .lars.HostInfo host = 3;
int GetRouteResponse::host_size() const {
  return host_.size();
}
void GetRouteResponse::clear_host() {
  host_.Clear();
}
const ::lars::HostInfo& GetRouteResponse::host(int index) const {
  // @@protoc_insertion_point(field_get:lars.GetRouteResponse.host)
  return host_.Get(index);
}
::lars::HostInfo* GetRouteResponse::mutable_host(int index) {
  // @@protoc_insertion_point(field_mutable:lars.GetRouteResponse.host)
  return host_.Mutable(index);
}
::lars::HostInfo* GetRouteResponse::add_host() {
  // @@protoc_insertion_point(field_add:lars.GetRouteResponse.host)
  return host_.Add();
}
::google::protobuf::RepeatedPtrField< ::lars::HostInfo >*
GetRouteResponse::mutable_host() {
  // @@protoc_insertion_point(field_mutable_list:lars.GetRouteResponse.host)
  return &host_;
}
const ::google::protobuf::RepeatedPtrField< ::lars::HostInfo >&
GetRouteResponse::host() const {
  // @@protoc_insertion_point(field_list:lars.GetRouteResponse.host)
  return host_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostCallResult::kIpFieldNumber;
const int HostCallResult::kPortFieldNumber;
const int HostCallResult::kSuccFieldNumber;
const int HostCallResult::kErrFieldNumber;
const int HostCallResult::kOverloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostCallResult::HostCallResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lars_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lars.HostCallResult)
}
HostCallResult::HostCallResult(const HostCallResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&overload_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(overload_));
  // @@protoc_insertion_point(copy_constructor:lars.HostCallResult)
}

void HostCallResult::SharedCtor() {
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overload_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(overload_));
  _cached_size_ = 0;
}

HostCallResult::~HostCallResult() {
  // @@protoc_insertion_point(destructor:lars.HostCallResult)
  SharedDtor();
}

void HostCallResult::SharedDtor() {
}

void HostCallResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HostCallResult::descriptor() {
  protobuf_lars_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lars_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HostCallResult& HostCallResult::default_instance() {
  protobuf_lars_2eproto::InitDefaults();
  return *internal_default_instance();
}

HostCallResult* HostCallResult::New(::google::protobuf::Arena* arena) const {
  HostCallResult* n = new HostCallResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostCallResult::Clear() {
// @@protoc_insertion_point(message_clear_start:lars.HostCallResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overload_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(overload_));
  _internal_metadata_.Clear();
}

bool HostCallResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lars.HostCallResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 succ = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &succ_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 err = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool overload = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lars.HostCallResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lars.HostCallResult)
  return false;
#undef DO_
}

void HostCallResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lars.HostCallResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ip(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // uint32 succ = 3;
  if (this->succ() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->succ(), output);
  }

  // uint32 err = 4;
  if (this->err() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->err(), output);
  }

  // bool overload = 5;
  if (this->overload() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->overload(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lars.HostCallResult)
}

::google::protobuf::uint8* HostCallResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lars.HostCallResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // uint32 succ = 3;
  if (this->succ() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->succ(), target);
  }

  // uint32 err = 4;
  if (this->err() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->err(), target);
  }

  // bool overload = 5;
  if (this->overload() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->overload(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lars.HostCallResult)
  return target;
}

size_t HostCallResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lars.HostCallResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 ip = 1;
  if (this->ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // uint32 succ = 3;
  if (this->succ() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->succ());
  }

  // uint32 err = 4;
  if (this->err() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->err());
  }

  // bool overload = 5;
  if (this->overload() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostCallResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lars.HostCallResult)
  GOOGLE_DCHECK_NE(&from, this);
  const HostCallResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HostCallResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lars.HostCallResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lars.HostCallResult)
    MergeFrom(*source);
  }
}

void HostCallResult::MergeFrom(const HostCallResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lars.HostCallResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip() != 0) {
    set_ip(from.ip());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.succ() != 0) {
    set_succ(from.succ());
  }
  if (from.err() != 0) {
    set_err(from.err());
  }
  if (from.overload() != 0) {
    set_overload(from.overload());
  }
}

void HostCallResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lars.HostCallResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostCallResult::CopyFrom(const HostCallResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lars.HostCallResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostCallResult::IsInitialized() const {
  return true;
}

void HostCallResult::Swap(HostCallResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostCallResult::InternalSwap(HostCallResult* other) {
  using std::swap;
  swap(ip_, other->ip_);
  swap(port_, other->port_);
  swap(succ_, other->succ_);
  swap(err_, other->err_);
  swap(overload_, other->overload_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HostCallResult::GetMetadata() const {
  protobuf_lars_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lars_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HostCallResult

// int32 ip = 1;
void HostCallResult::clear_ip() {
  ip_ = 0;
}
::google::protobuf::int32 HostCallResult::ip() const {
  // @@protoc_insertion_point(field_get:lars.HostCallResult.ip)
  return ip_;
}
void HostCallResult::set_ip(::google::protobuf::int32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:lars.HostCallResult.ip)
}

// int32 port = 2;
void HostCallResult::clear_port() {
  port_ = 0;
}
::google::protobuf::int32 HostCallResult::port() const {
  // @@protoc_insertion_point(field_get:lars.HostCallResult.port)
  return port_;
}
void HostCallResult::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:lars.HostCallResult.port)
}

// uint32 succ = 3;
void HostCallResult::clear_succ() {
  succ_ = 0u;
}
::google::protobuf::uint32 HostCallResult::succ() const {
  // @@protoc_insertion_point(field_get:lars.HostCallResult.succ)
  return succ_;
}
void HostCallResult::set_succ(::google::protobuf::uint32 value) {
  
  succ_ = value;
  // @@protoc_insertion_point(field_set:lars.HostCallResult.succ)
}

// uint32 err = 4;
void HostCallResult::clear_err() {
  err_ = 0u;
}
::google::protobuf::uint32 HostCallResult::err() const {
  // @@protoc_insertion_point(field_get:lars.HostCallResult.err)
  return err_;
}
void HostCallResult::set_err(::google::protobuf::uint32 value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:lars.HostCallResult.err)
}

// bool overload = 5;
void HostCallResult::clear_overload() {
  overload_ = false;
}
bool HostCallResult::overload() const {
  // @@protoc_insertion_point(field_get:lars.HostCallResult.overload)
  return overload_;
}
void HostCallResult::set_overload(bool value) {
  
  overload_ = value;
  // @@protoc_insertion_point(field_set:lars.HostCallResult.overload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportStatusRequest::kModidFieldNumber;
const int ReportStatusRequest::kCmdidFieldNumber;
const int ReportStatusRequest::kCallerFieldNumber;
const int ReportStatusRequest::kResultsFieldNumber;
const int ReportStatusRequest::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportStatusRequest::ReportStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lars_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lars.ReportStatusRequest)
}
ReportStatusRequest::ReportStatusRequest(const ReportStatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&modid_, &from.modid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(ts_));
  // @@protoc_insertion_point(copy_constructor:lars.ReportStatusRequest)
}

void ReportStatusRequest::SharedCtor() {
  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(ts_));
  _cached_size_ = 0;
}

ReportStatusRequest::~ReportStatusRequest() {
  // @@protoc_insertion_point(destructor:lars.ReportStatusRequest)
  SharedDtor();
}

void ReportStatusRequest::SharedDtor() {
}

void ReportStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportStatusRequest::descriptor() {
  protobuf_lars_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lars_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportStatusRequest& ReportStatusRequest::default_instance() {
  protobuf_lars_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReportStatusRequest* ReportStatusRequest::New(::google::protobuf::Arena* arena) const {
  ReportStatusRequest* n = new ReportStatusRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lars.ReportStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(ts_));
  _internal_metadata_.Clear();
}

bool ReportStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lars.ReportStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 modid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cmdid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 caller = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caller_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .lars.HostCallResult results = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lars.ReportStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lars.ReportStatusRequest)
  return false;
#undef DO_
}

void ReportStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lars.ReportStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->modid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modid(), output);
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmdid(), output);
  }

  // int32 caller = 3;
  if (this->caller() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->caller(), output);
  }

  // repeated .lars.HostCallResult results = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->results(static_cast<int>(i)), output);
  }

  // uint32 ts = 5;
  if (this->ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ts(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lars.ReportStatusRequest)
}

::google::protobuf::uint8* ReportStatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lars.ReportStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->modid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modid(), target);
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmdid(), target);
  }

  // int32 caller = 3;
  if (this->caller() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->caller(), target);
  }

  // repeated .lars.HostCallResult results = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->results(static_cast<int>(i)), deterministic, target);
  }

  // uint32 ts = 5;
  if (this->ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ts(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lars.ReportStatusRequest)
  return target;
}

size_t ReportStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lars.ReportStatusRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .lars.HostCallResult results = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(static_cast<int>(i)));
    }
  }

  // int32 modid = 1;
  if (this->modid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->modid());
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmdid());
  }

  // int32 caller = 3;
  if (this->caller() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->caller());
  }

  // uint32 ts = 5;
  if (this->ts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lars.ReportStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportStatusRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportStatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lars.ReportStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lars.ReportStatusRequest)
    MergeFrom(*source);
  }
}

void ReportStatusRequest::MergeFrom(const ReportStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lars.ReportStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.modid() != 0) {
    set_modid(from.modid());
  }
  if (from.cmdid() != 0) {
    set_cmdid(from.cmdid());
  }
  if (from.caller() != 0) {
    set_caller(from.caller());
  }
  if (from.ts() != 0) {
    set_ts(from.ts());
  }
}

void ReportStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lars.ReportStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportStatusRequest::CopyFrom(const ReportStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lars.ReportStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportStatusRequest::IsInitialized() const {
  return true;
}

void ReportStatusRequest::Swap(ReportStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportStatusRequest::InternalSwap(ReportStatusRequest* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  swap(modid_, other->modid_);
  swap(cmdid_, other->cmdid_);
  swap(caller_, other->caller_);
  swap(ts_, other->ts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportStatusRequest::GetMetadata() const {
  protobuf_lars_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lars_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportStatusRequest

// int32 modid = 1;
void ReportStatusRequest::clear_modid() {
  modid_ = 0;
}
::google::protobuf::int32 ReportStatusRequest::modid() const {
  // @@protoc_insertion_point(field_get:lars.ReportStatusRequest.modid)
  return modid_;
}
void ReportStatusRequest::set_modid(::google::protobuf::int32 value) {
  
  modid_ = value;
  // @@protoc_insertion_point(field_set:lars.ReportStatusRequest.modid)
}

// int32 cmdid = 2;
void ReportStatusRequest::clear_cmdid() {
  cmdid_ = 0;
}
::google::protobuf::int32 ReportStatusRequest::cmdid() const {
  // @@protoc_insertion_point(field_get:lars.ReportStatusRequest.cmdid)
  return cmdid_;
}
void ReportStatusRequest::set_cmdid(::google::protobuf::int32 value) {
  
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:lars.ReportStatusRequest.cmdid)
}

// int32 caller = 3;
void ReportStatusRequest::clear_caller() {
  caller_ = 0;
}
::google::protobuf::int32 ReportStatusRequest::caller() const {
  // @@protoc_insertion_point(field_get:lars.ReportStatusRequest.caller)
  return caller_;
}
void ReportStatusRequest::set_caller(::google::protobuf::int32 value) {
  
  caller_ = value;
  // @@protoc_insertion_point(field_set:lars.ReportStatusRequest.caller)
}

// repeated .lars.HostCallResult results = 4;
int ReportStatusRequest::results_size() const {
  return results_.size();
}
void ReportStatusRequest::clear_results() {
  results_.Clear();
}
const ::lars::HostCallResult& ReportStatusRequest::results(int index) const {
  // @@protoc_insertion_point(field_get:lars.ReportStatusRequest.results)
  return results_.Get(index);
}
::lars::HostCallResult* ReportStatusRequest::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:lars.ReportStatusRequest.results)
  return results_.Mutable(index);
}
::lars::HostCallResult* ReportStatusRequest::add_results() {
  // @@protoc_insertion_point(field_add:lars.ReportStatusRequest.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::lars::HostCallResult >*
ReportStatusRequest::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:lars.ReportStatusRequest.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::lars::HostCallResult >&
ReportStatusRequest::results() const {
  // @@protoc_insertion_point(field_list:lars.ReportStatusRequest.results)
  return results_;
}

// uint32 ts = 5;
void ReportStatusRequest::clear_ts() {
  ts_ = 0u;
}
::google::protobuf::uint32 ReportStatusRequest::ts() const {
  // @@protoc_insertion_point(field_get:lars.ReportStatusRequest.ts)
  return ts_;
}
void ReportStatusRequest::set_ts(::google::protobuf::uint32 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:lars.ReportStatusRequest.ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetHostRequest::kSeqFieldNumber;
const int GetHostRequest::kModidFieldNumber;
const int GetHostRequest::kCmdidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetHostRequest::GetHostRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lars_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lars.GetHostRequest)
}
GetHostRequest::GetHostRequest(const GetHostRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmdid_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(cmdid_));
  // @@protoc_insertion_point(copy_constructor:lars.GetHostRequest)
}

void GetHostRequest::SharedCtor() {
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmdid_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(cmdid_));
  _cached_size_ = 0;
}

GetHostRequest::~GetHostRequest() {
  // @@protoc_insertion_point(destructor:lars.GetHostRequest)
  SharedDtor();
}

void GetHostRequest::SharedDtor() {
}

void GetHostRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetHostRequest::descriptor() {
  protobuf_lars_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lars_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetHostRequest& GetHostRequest::default_instance() {
  protobuf_lars_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetHostRequest* GetHostRequest::New(::google::protobuf::Arena* arena) const {
  GetHostRequest* n = new GetHostRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetHostRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lars.GetHostRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmdid_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(cmdid_));
  _internal_metadata_.Clear();
}

bool GetHostRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lars.GetHostRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 seq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 modid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cmdid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lars.GetHostRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lars.GetHostRequest)
  return false;
#undef DO_
}

void GetHostRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lars.GetHostRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seq = 1;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seq(), output);
  }

  // int32 modid = 2;
  if (this->modid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->modid(), output);
  }

  // int32 cmdid = 3;
  if (this->cmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmdid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lars.GetHostRequest)
}

::google::protobuf::uint8* GetHostRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lars.GetHostRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seq = 1;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seq(), target);
  }

  // int32 modid = 2;
  if (this->modid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->modid(), target);
  }

  // int32 cmdid = 3;
  if (this->cmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cmdid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lars.GetHostRequest)
  return target;
}

size_t GetHostRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lars.GetHostRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 seq = 1;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq());
  }

  // int32 modid = 2;
  if (this->modid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->modid());
  }

  // int32 cmdid = 3;
  if (this->cmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmdid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHostRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lars.GetHostRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHostRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetHostRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lars.GetHostRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lars.GetHostRequest)
    MergeFrom(*source);
  }
}

void GetHostRequest::MergeFrom(const GetHostRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lars.GetHostRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seq() != 0) {
    set_seq(from.seq());
  }
  if (from.modid() != 0) {
    set_modid(from.modid());
  }
  if (from.cmdid() != 0) {
    set_cmdid(from.cmdid());
  }
}

void GetHostRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lars.GetHostRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHostRequest::CopyFrom(const GetHostRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lars.GetHostRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHostRequest::IsInitialized() const {
  return true;
}

void GetHostRequest::Swap(GetHostRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetHostRequest::InternalSwap(GetHostRequest* other) {
  using std::swap;
  swap(seq_, other->seq_);
  swap(modid_, other->modid_);
  swap(cmdid_, other->cmdid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetHostRequest::GetMetadata() const {
  protobuf_lars_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lars_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetHostRequest

// uint32 seq = 1;
void GetHostRequest::clear_seq() {
  seq_ = 0u;
}
::google::protobuf::uint32 GetHostRequest::seq() const {
  // @@protoc_insertion_point(field_get:lars.GetHostRequest.seq)
  return seq_;
}
void GetHostRequest::set_seq(::google::protobuf::uint32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:lars.GetHostRequest.seq)
}

// int32 modid = 2;
void GetHostRequest::clear_modid() {
  modid_ = 0;
}
::google::protobuf::int32 GetHostRequest::modid() const {
  // @@protoc_insertion_point(field_get:lars.GetHostRequest.modid)
  return modid_;
}
void GetHostRequest::set_modid(::google::protobuf::int32 value) {
  
  modid_ = value;
  // @@protoc_insertion_point(field_set:lars.GetHostRequest.modid)
}

// int32 cmdid = 3;
void GetHostRequest::clear_cmdid() {
  cmdid_ = 0;
}
::google::protobuf::int32 GetHostRequest::cmdid() const {
  // @@protoc_insertion_point(field_get:lars.GetHostRequest.cmdid)
  return cmdid_;
}
void GetHostRequest::set_cmdid(::google::protobuf::int32 value) {
  
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:lars.GetHostRequest.cmdid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetHostResponse::kSeqFieldNumber;
const int GetHostResponse::kModidFieldNumber;
const int GetHostResponse::kCmdidFieldNumber;
const int GetHostResponse::kRetcodeFieldNumber;
const int GetHostResponse::kHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetHostResponse::GetHostResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lars_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lars.GetHostResponse)
}
GetHostResponse::GetHostResponse(const GetHostResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_host()) {
    host_ = new ::lars::HostInfo(*from.host_);
  } else {
    host_ = NULL;
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:lars.GetHostResponse)
}

void GetHostResponse::SharedCtor() {
  ::memset(&host_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&host_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

GetHostResponse::~GetHostResponse() {
  // @@protoc_insertion_point(destructor:lars.GetHostResponse)
  SharedDtor();
}

void GetHostResponse::SharedDtor() {
  if (this != internal_default_instance()) delete host_;
}

void GetHostResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetHostResponse::descriptor() {
  protobuf_lars_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lars_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetHostResponse& GetHostResponse::default_instance() {
  protobuf_lars_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetHostResponse* GetHostResponse::New(::google::protobuf::Arena* arena) const {
  GetHostResponse* n = new GetHostResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetHostResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lars.GetHostResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && host_ != NULL) {
    delete host_;
  }
  host_ = NULL;
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool GetHostResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lars.GetHostResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 seq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 modid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cmdid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lars.HostInfo host = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lars.GetHostResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lars.GetHostResponse)
  return false;
#undef DO_
}

void GetHostResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lars.GetHostResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seq = 1;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seq(), output);
  }

  // int32 modid = 2;
  if (this->modid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->modid(), output);
  }

  // int32 cmdid = 3;
  if (this->cmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmdid(), output);
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->retcode(), output);
  }

  // .lars.HostInfo host = 5;
  if (this->has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->host_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lars.GetHostResponse)
}

::google::protobuf::uint8* GetHostResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lars.GetHostResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seq = 1;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seq(), target);
  }

  // int32 modid = 2;
  if (this->modid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->modid(), target);
  }

  // int32 cmdid = 3;
  if (this->cmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cmdid(), target);
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->retcode(), target);
  }

  // .lars.HostInfo host = 5;
  if (this->has_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->host_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lars.GetHostResponse)
  return target;
}

size_t GetHostResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lars.GetHostResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .lars.HostInfo host = 5;
  if (this->has_host()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->host_);
  }

  // uint32 seq = 1;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq());
  }

  // int32 modid = 2;
  if (this->modid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->modid());
  }

  // int32 cmdid = 3;
  if (this->cmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmdid());
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHostResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lars.GetHostResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHostResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetHostResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lars.GetHostResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lars.GetHostResponse)
    MergeFrom(*source);
  }
}

void GetHostResponse::MergeFrom(const GetHostResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lars.GetHostResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_host()) {
    mutable_host()->::lars::HostInfo::MergeFrom(from.host());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
  if (from.modid() != 0) {
    set_modid(from.modid());
  }
  if (from.cmdid() != 0) {
    set_cmdid(from.cmdid());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GetHostResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lars.GetHostResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHostResponse::CopyFrom(const GetHostResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lars.GetHostResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHostResponse::IsInitialized() const {
  return true;
}

void GetHostResponse::Swap(GetHostResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetHostResponse::InternalSwap(GetHostResponse* other) {
  using std::swap;
  swap(host_, other->host_);
  swap(seq_, other->seq_);
  swap(modid_, other->modid_);
  swap(cmdid_, other->cmdid_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetHostResponse::GetMetadata() const {
  protobuf_lars_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lars_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetHostResponse

// uint32 seq = 1;
void GetHostResponse::clear_seq() {
  seq_ = 0u;
}
::google::protobuf::uint32 GetHostResponse::seq() const {
  // @@protoc_insertion_point(field_get:lars.GetHostResponse.seq)
  return seq_;
}
void GetHostResponse::set_seq(::google::protobuf::uint32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:lars.GetHostResponse.seq)
}

// int32 modid = 2;
void GetHostResponse::clear_modid() {
  modid_ = 0;
}
::google::protobuf::int32 GetHostResponse::modid() const {
  // @@protoc_insertion_point(field_get:lars.GetHostResponse.modid)
  return modid_;
}
void GetHostResponse::set_modid(::google::protobuf::int32 value) {
  
  modid_ = value;
  // @@protoc_insertion_point(field_set:lars.GetHostResponse.modid)
}

// int32 cmdid = 3;
void GetHostResponse::clear_cmdid() {
  cmdid_ = 0;
}
::google::protobuf::int32 GetHostResponse::cmdid() const {
  // @@protoc_insertion_point(field_get:lars.GetHostResponse.cmdid)
  return cmdid_;
}
void GetHostResponse::set_cmdid(::google::protobuf::int32 value) {
  
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:lars.GetHostResponse.cmdid)
}

// int32 retcode = 4;
void GetHostResponse::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GetHostResponse::retcode() const {
  // @@protoc_insertion_point(field_get:lars.GetHostResponse.retcode)
  return retcode_;
}
void GetHostResponse::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:lars.GetHostResponse.retcode)
}

// .lars.HostInfo host = 5;
bool GetHostResponse::has_host() const {
  return this != internal_default_instance() && host_ != NULL;
}
void GetHostResponse::clear_host() {
  if (GetArenaNoVirtual() == NULL && host_ != NULL) delete host_;
  host_ = NULL;
}
const ::lars::HostInfo& GetHostResponse::host() const {
  const ::lars::HostInfo* p = host_;
  // @@protoc_insertion_point(field_get:lars.GetHostResponse.host)
  return p != NULL ? *p : *reinterpret_cast<const ::lars::HostInfo*>(
      &::lars::_HostInfo_default_instance_);
}
::lars::HostInfo* GetHostResponse::mutable_host() {
  
  if (host_ == NULL) {
    host_ = new ::lars::HostInfo;
  }
  // @@protoc_insertion_point(field_mutable:lars.GetHostResponse.host)
  return host_;
}
::lars::HostInfo* GetHostResponse::release_host() {
  // @@protoc_insertion_point(field_release:lars.GetHostResponse.host)
  
  ::lars::HostInfo* temp = host_;
  host_ = NULL;
  return temp;
}
void GetHostResponse::set_allocated_host(::lars::HostInfo* host) {
  delete host_;
  host_ = host;
  if (host) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lars.GetHostResponse.host)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportRequest::kModidFieldNumber;
const int ReportRequest::kCmdidFieldNumber;
const int ReportRequest::kHostFieldNumber;
const int ReportRequest::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportRequest::ReportRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lars_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lars.ReportRequest)
}
ReportRequest::ReportRequest(const ReportRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_host()) {
    host_ = new ::lars::HostInfo(*from.host_);
  } else {
    host_ = NULL;
  }
  ::memcpy(&modid_, &from.modid_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:lars.ReportRequest)
}

void ReportRequest::SharedCtor() {
  ::memset(&host_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&host_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

ReportRequest::~ReportRequest() {
  // @@protoc_insertion_point(destructor:lars.ReportRequest)
  SharedDtor();
}

void ReportRequest::SharedDtor() {
  if (this != internal_default_instance()) delete host_;
}

void ReportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportRequest::descriptor() {
  protobuf_lars_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lars_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportRequest& ReportRequest::default_instance() {
  protobuf_lars_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReportRequest* ReportRequest::New(::google::protobuf::Arena* arena) const {
  ReportRequest* n = new ReportRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lars.ReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && host_ != NULL) {
    delete host_;
  }
  host_ = NULL;
  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool ReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lars.ReportRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 modid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cmdid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lars.HostInfo host = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lars.ReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lars.ReportRequest)
  return false;
#undef DO_
}

void ReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lars.ReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->modid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modid(), output);
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmdid(), output);
  }

  // .lars.HostInfo host = 3;
  if (this->has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->host_, output);
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lars.ReportRequest)
}

::google::protobuf::uint8* ReportRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lars.ReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->modid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modid(), target);
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmdid(), target);
  }

  // .lars.HostInfo host = 3;
  if (this->has_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->host_, deterministic, target);
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lars.ReportRequest)
  return target;
}

size_t ReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lars.ReportRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .lars.HostInfo host = 3;
  if (this->has_host()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->host_);
  }

  // int32 modid = 1;
  if (this->modid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->modid());
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmdid());
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lars.ReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lars.ReportRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lars.ReportRequest)
    MergeFrom(*source);
  }
}

void ReportRequest::MergeFrom(const ReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lars.ReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_host()) {
    mutable_host()->::lars::HostInfo::MergeFrom(from.host());
  }
  if (from.modid() != 0) {
    set_modid(from.modid());
  }
  if (from.cmdid() != 0) {
    set_cmdid(from.cmdid());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void ReportRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lars.ReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportRequest::CopyFrom(const ReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lars.ReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportRequest::IsInitialized() const {
  return true;
}

void ReportRequest::Swap(ReportRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportRequest::InternalSwap(ReportRequest* other) {
  using std::swap;
  swap(host_, other->host_);
  swap(modid_, other->modid_);
  swap(cmdid_, other->cmdid_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportRequest::GetMetadata() const {
  protobuf_lars_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lars_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportRequest

// int32 modid = 1;
void ReportRequest::clear_modid() {
  modid_ = 0;
}
::google::protobuf::int32 ReportRequest::modid() const {
  // @@protoc_insertion_point(field_get:lars.ReportRequest.modid)
  return modid_;
}
void ReportRequest::set_modid(::google::protobuf::int32 value) {
  
  modid_ = value;
  // @@protoc_insertion_point(field_set:lars.ReportRequest.modid)
}

// int32 cmdid = 2;
void ReportRequest::clear_cmdid() {
  cmdid_ = 0;
}
::google::protobuf::int32 ReportRequest::cmdid() const {
  // @@protoc_insertion_point(field_get:lars.ReportRequest.cmdid)
  return cmdid_;
}
void ReportRequest::set_cmdid(::google::protobuf::int32 value) {
  
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:lars.ReportRequest.cmdid)
}

// .lars.HostInfo host = 3;
bool ReportRequest::has_host() const {
  return this != internal_default_instance() && host_ != NULL;
}
void ReportRequest::clear_host() {
  if (GetArenaNoVirtual() == NULL && host_ != NULL) delete host_;
  host_ = NULL;
}
const ::lars::HostInfo& ReportRequest::host() const {
  const ::lars::HostInfo* p = host_;
  // @@protoc_insertion_point(field_get:lars.ReportRequest.host)
  return p != NULL ? *p : *reinterpret_cast<const ::lars::HostInfo*>(
      &::lars::_HostInfo_default_instance_);
}
::lars::HostInfo* ReportRequest::mutable_host() {
  
  if (host_ == NULL) {
    host_ = new ::lars::HostInfo;
  }
  // @@protoc_insertion_point(field_mutable:lars.ReportRequest.host)
  return host_;
}
::lars::HostInfo* ReportRequest::release_host() {
  // @@protoc_insertion_point(field_release:lars.ReportRequest.host)
  
  ::lars::HostInfo* temp = host_;
  host_ = NULL;
  return temp;
}
void ReportRequest::set_allocated_host(::lars::HostInfo* host) {
  delete host_;
  host_ = host;
  if (host) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lars.ReportRequest.host)
}

// int32 retcode = 4;
void ReportRequest::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ReportRequest::retcode() const {
  // @@protoc_insertion_point(field_get:lars.ReportRequest.retcode)
  return retcode_;
}
void ReportRequest::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:lars.ReportRequest.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lars

// @@protoc_insertion_point(global_scope)
